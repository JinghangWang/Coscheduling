From 056fbcea19db314d23ce7fdf72f57dc23092b7d5 Mon Sep 17 00:00:00 2001
From: Peter Dinda <pdinda@northwestern.edu>
Date: Sun, 21 May 2017 16:56:05 -0500
Subject: [PATCH 09/20] Updates to IRQ handling

- registration and dispatch now support a state pointer
- various internal handlers updated to reflect this change
- assorted refactoring / cleanup
---
 include/nautilus/irq.h | 61 +++++++++-----------------------------------------
 src/arch/x64/smp.c     |  1 +
 src/nautilus/fpu.c     |  8 ++-----
 src/nautilus/idle.c    |  3 +--
 src/nautilus/irq.c     | 31 ++++++++++++-------------
 src/nautilus/nemo.c    |  2 +-
 src/nautilus/smp.c     |  4 ++--
 src/test/benchmark.c   |  2 +-
 src/test/ipi.c         |  6 ++---
 9 files changed, 38 insertions(+), 80 deletions(-)

diff --git a/include/nautilus/irq.h b/include/nautilus/irq.h
index b5b5ca0..9f5aa4c 100644
--- a/include/nautilus/irq.h
+++ b/include/nautilus/irq.h
@@ -28,57 +28,18 @@ extern "C" {
 #endif
 
 #include <nautilus/nautilus.h>
-#include <nautilus/idt.h>
 #include <nautilus/cpu.h>
+#include <nautilus/cpu_state.h>
+#include <nautilus/list.h>
 
-#include <dev/apic.h>
+extern void apic_do_eoi();
 
-#define PIC_MASTER_CMD_PORT  0x20
-#define PIC_MASTER_DATA_PORT 0x21
-#define PIC_SLAVE_CMD_PORT   0xa0
-#define PIC_SLAVE_DATA_PORT  0xa1
-
-#define PIC_MODE_ON (1 << 7)
-
-#define MAX_IRQ_NUM 15
-#define NUM_EXT_IRQS   16
-#define FIRST_EXT_IRQ  32
+#define IRQ_HANDLER_END() apic_do_eoi()
 
 typedef enum { INT_TYPE_INT, INT_TYPE_NMI, INT_TYPE_SMI, INT_TYPE_EXT } int_type_t;
 typedef enum { INT_POL_BUS, INT_POL_ACTHI, INT_POL_RSVD, INT_POL_ACTLO } int_pol_t;
 typedef enum { INT_TRIG_BUS, INT_TRIG_EDGE, INT_TRIG_RSVD, INT_TRIG_LEVEL } int_trig_t;
 
-#define IRQ_HANDLER_END() apic_do_eoi()
-
-
-#define enable_irqs() sti()
-#define disable_irqs() cli()
-
-uint8_t irqs_enabled(void);
-
-static inline uint8_t
-irq_disable_save (void)
-{
-    uint8_t enabled = irqs_enabled();
-
-    if (enabled) {
-        disable_irqs();
-    }
-
-    return enabled;
-}
-        
-
-static inline void 
-irq_enable_restore (uint8_t iflag)
-{
-    if (iflag) {
-        /* Interrupts were originally enabled, so turn them back on */
-        enable_irqs();
-    }
-}
-
-
 struct nk_int_entry {
     int_trig_t trig_mode;
     int_pol_t  polarity;
@@ -98,19 +59,19 @@ struct nk_bus_entry {
     struct list_head elm;
 };
 
-inline void nk_mask_irq(uint8_t irq);
-inline void nk_unmask_irq(uint8_t irq);
-inline uint8_t nk_irq_is_assigned(uint8_t irq);
+void nk_mask_irq(uint8_t irq);
+void nk_unmask_irq(uint8_t irq);
+uint8_t nk_irq_is_assigned(uint8_t irq);
 
-inline uint8_t irq_to_vec (uint8_t irq);
-inline void irqmap_set_ioapic (uint8_t irq, struct ioapic * ioapic);
+uint8_t irq_to_vec (uint8_t irq);
+void irqmap_set_ioapic (uint8_t irq, struct ioapic * ioapic);
 void disable_8259pic(void);
 void imcr_begin_sym_io(void);
 int register_irq_handler (uint16_t irq, 
-                          int (*handler)(excp_entry_t *, excp_vec_t),
+                          int (*handler)(excp_entry_t *, excp_vec_t, void *priv_data),
                           void * priv_data);
 int register_int_handler (uint16_t int_vec,
-                          int (*handler)(excp_entry_t *, excp_vec_t),
+                          int (*handler)(excp_entry_t *, excp_vec_t, void *priv_data),
                           void * priv_data);
 
 int nk_int_init(struct sys_info * sys);
diff --git a/src/arch/x64/smp.c b/src/arch/x64/smp.c
index ebb9fc1..8bd1c98 100644
--- a/src/arch/x64/smp.c
+++ b/src/arch/x64/smp.c
@@ -274,6 +274,7 @@ find_mp_pointer (void)
     return 0;
 }
 
+#define PIC_MODE_ON (1 << 7)
 
 static int
 __early_init_mp (struct naut_info * naut)
diff --git a/src/nautilus/fpu.c b/src/nautilus/fpu.c
index 077a65e..4e0f8d4 100644
--- a/src/nautilus/fpu.c
+++ b/src/nautilus/fpu.c
@@ -69,18 +69,14 @@
 
 
 
-int mf_handler (excp_entry_t * excp, excp_vec_t vec);
-int 
-mf_handler (excp_entry_t * excp, excp_vec_t vec)
+int mf_handler (excp_entry_t * excp, excp_vec_t vec, void *state)
 {
     panic("x86 Floating Point Exception\n");
     return 0;
 }
 
 
-int xm_handler (excp_entry_t * excp, excp_vec_t vec);
-int
-xm_handler (excp_entry_t * excp, excp_vec_t vec)
+int xm_handler (excp_entry_t * excp, excp_vec_t vec, void *state)
 {
     uint32_t m;
     asm volatile ("stmxcsr %[_m]" : [_m] "=m" (m) : : "memory");
diff --git a/src/nautilus/idle.c b/src/nautilus/idle.c
index d4e6c22..80a2cb2 100644
--- a/src/nautilus/idle.c
+++ b/src/nautilus/idle.c
@@ -23,6 +23,7 @@
 #include <nautilus/nautilus.h>
 #include <nautilus/idle.h>
 #include <nautilus/cpu.h>
+#include <nautilus/irq.h>
 #include <nautilus/thread.h>
 #include <nautilus/scheduler.h>
 
@@ -49,8 +50,6 @@ idle_delay (unsigned long long n)
 void 
 idle (void * in, void ** out)
 {
-    extern int irqs_enabled();
-
     get_cur_thread()->is_idle = 1;
 
     uint64_t last_steal = nk_sched_get_runtime(get_cur_thread());
diff --git a/src/nautilus/irq.c b/src/nautilus/irq.c
index cf9f3d3..5930e6d 100644
--- a/src/nautilus/irq.c
+++ b/src/nautilus/irq.c
@@ -26,6 +26,13 @@
 #include <nautilus/cpu.h>
 #include <nautilus/mm.h>
 
+#define PIC_MASTER_CMD_PORT  0x20
+#define PIC_MASTER_DATA_PORT 0x21
+#define PIC_SLAVE_CMD_PORT   0xa0
+#define PIC_SLAVE_DATA_PORT  0xa1
+
+#define MAX_IRQ_NUM    15     // this is really PIC-specific
+
 
 /* NOTE: the APIC organizes interrupt priorities as follows:
  * class 0: interrupt vectors 0-15
@@ -50,21 +57,15 @@
  * priority with increasing vector number
  *
  */
-uint8_t 
-irqs_enabled (void)
-{
-    uint64_t rflags = read_rflags();
-    return (rflags & RFLAGS_IF) != 0;
-}
 
 
-inline uint8_t
+uint8_t
 irq_to_vec (uint8_t irq)
 {
     return nk_get_nautilus_info()->sys.int_info.irq_map[irq].vector;
 }
 
-inline void
+void
 irqmap_set_ioapic (uint8_t irq, struct ioapic * ioapic)
 {
     struct naut_info * naut = nk_get_nautilus_info();
@@ -79,7 +80,7 @@ set_irq_vector (uint8_t irq, uint8_t vector)
 }
 
 
-inline void 
+void 
 nk_mask_irq (uint8_t irq)
 {
     struct naut_info * naut = nk_get_nautilus_info();
@@ -89,7 +90,7 @@ nk_mask_irq (uint8_t irq)
 }
 
 
-inline void
+void
 nk_unmask_irq (uint8_t irq)
 {
     struct naut_info * naut = nk_get_nautilus_info();
@@ -99,7 +100,7 @@ nk_unmask_irq (uint8_t irq)
 }
 
 
-inline uint8_t
+uint8_t
 nk_irq_is_assigned (uint8_t irq)
 {
     struct naut_info * naut = nk_get_nautilus_info();
@@ -115,7 +116,7 @@ nk_irq_is_assigned (uint8_t irq)
  */
 int 
 register_int_handler (uint16_t int_vec, 
-                      int (*handler)(excp_entry_t *, excp_vec_t),
+                      int (*handler)(excp_entry_t *, excp_vec_t, void *),
                       void * priv_data)
 {
 
@@ -129,7 +130,7 @@ register_int_handler (uint16_t int_vec,
         return -1;
     }
 
-    idt_assign_entry(int_vec, (ulong_t)handler);
+    idt_assign_entry(int_vec, (ulong_t)handler, (ulong_t)priv_data);
 
     return 0;
 }
@@ -137,7 +138,7 @@ register_int_handler (uint16_t int_vec,
 
 int 
 register_irq_handler (uint16_t irq, 
-                      int (*handler)(excp_entry_t *, excp_vec_t),
+                      int (*handler)(excp_entry_t *, excp_vec_t, void *),
                       void * priv_data)
 {
     uint8_t int_vector;
@@ -154,7 +155,7 @@ register_irq_handler (uint16_t irq,
 
     int_vector = irq_to_vec(irq);
 
-    idt_assign_entry(int_vector, (ulong_t)handler);
+    idt_assign_entry(int_vector, (ulong_t)handler, (ulong_t)priv_data);
 
     return 0;
 }
diff --git a/src/nautilus/nemo.c b/src/nautilus/nemo.c
index b178aa3..ddea8a0 100644
--- a/src/nautilus/nemo.c
+++ b/src/nautilus/nemo.c
@@ -53,7 +53,7 @@ event_is_valid (nemo_event_id_t id)
 
 
 static int
-nemo_ipi_event_recv (excp_entry_t * excp, excp_vec_t v)
+nemo_ipi_event_recv (excp_entry_t * excp, excp_vec_t v, void *state)
 {
 	nemo_event_id_t eid = nemo_lookup_table[my_cpu_id()];
 
diff --git a/src/nautilus/smp.c b/src/nautilus/smp.c
index d429f16..6281d8a 100644
--- a/src/nautilus/smp.c
+++ b/src/nautilus/smp.c
@@ -246,7 +246,7 @@ smp_bringup_aps (struct naut_info * naut)
 extern struct idt_desc idt_descriptor;
 extern struct gdt_desc64 gdtr64;
 
-static int xcall_handler(excp_entry_t * e, excp_vec_t v);
+static int xcall_handler(excp_entry_t * e, excp_vec_t v, void *state);
 
 
 static int
@@ -413,7 +413,7 @@ mark_xcall_done (struct nk_xcall * x)
 
 
 static int
-xcall_handler (excp_entry_t * e, excp_vec_t v) 
+xcall_handler (excp_entry_t * e, excp_vec_t v, void *state) 
 {
     nk_queue_t * xcq = per_cpu_get(xcall_q); 
     struct nk_xcall * x = NULL;
diff --git a/src/test/benchmark.c b/src/test/benchmark.c
index b71d54a..d6f05b4 100644
--- a/src/test/benchmark.c
+++ b/src/test/benchmark.c
@@ -808,7 +808,7 @@ time_ipi_send(void)
 static uint64_t int80_end = 0;
 
 static int
-int80_handler (excp_entry_t * excp, excp_vec_t v)
+int80_handler (excp_entry_t * excp, excp_vec_t v, void *state)
 {
     rdtscll(int80_end);
     return 0;
diff --git a/src/test/ipi.c b/src/test/ipi.c
index bd92cc1..e5e96d7 100644
--- a/src/test/ipi.c
+++ b/src/test/ipi.c
@@ -112,7 +112,7 @@ time_end (void)
 
 
 static int
-ping (excp_entry_t * excp, excp_vec_t vec)
+ping (excp_entry_t * excp, excp_vec_t vec, void *state)
 {
     struct apic_dev * apic = per_cpu_get(apic);
     apic_write_icr(apic,
@@ -125,7 +125,7 @@ ping (excp_entry_t * excp, excp_vec_t vec)
 
 
 static int
-pong (excp_entry_t * excp, excp_vec_t vec)
+pong (excp_entry_t * excp, excp_vec_t vec, void *state)
 {
     rdtscll(ipi_oneway_end);
     IRQ_HANDLER_END();
@@ -135,7 +135,7 @@ pong (excp_entry_t * excp, excp_vec_t vec)
 
 
 static int
-pong_bcast (excp_entry_t * excp, excp_vec_t vec)
+pong_bcast (excp_entry_t * excp, excp_vec_t vec, void *state)
 {
     uint64_t tmp;
     ipi_exp_data_t * data = glob_exp_data;
-- 
1.9.1

